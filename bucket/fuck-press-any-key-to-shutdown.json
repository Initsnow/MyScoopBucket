{
    "version": "1.0.2",
    "description": "Applies custom USB flags for device 18D1D00D0100 and manages backup/restore. Attempts self-elevation. Uses argument array for Start-Process.",
    "homepage": "https://github.com/Initsnow/MyScoopBucket",
    "license": "Unknown",
    "notes": [
        "This package modifies the Windows Registry (HKEY_LOCAL_MACHINE).",
        "It will attempt to request Administrator privileges via a UAC prompt if not already running as admin.",
        "Please approve the UAC prompt to allow registry modifications.",
        "If UAC is denied or elevation fails, installation/uninstallation will fail.",
        "During installation, the existing state of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\usbflags\\18D1D00D0100' is backed up.",
        "This backup is restored during uninstallation."
    ],
    "persist": [
        "registry_backup\\usbflags_18D1D00D0100_backup.reg",
        "registry_backup\\usbflags_18D1D00D0100_was_nonexistent.flag"
    ],
    "installer": {
        "script": [
            "param([switch]$IsElevatedProcess)",
            "",
            "function Perform-InstallationLogic {",
            "    Write-Host 'Executing installation logic with administrative privileges...'",
            "    $regKeyPath = 'HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\usbflags\\18D1D00D0100'",
            "    $backupDir = \"$persist_dir\\registry_backup\"",
            "    $backupFile = \"$backupDir\\usbflags_18D1D00D0100_backup.reg\"",
            "    $nonExistentFlag = \"$backupDir\\usbflags_18D1D00D0100_was_nonexistent.flag\"",
            "    ",
            "    if (-not (Test-Path $backupDir)) { New-Item -ItemType Directory -Path $backupDir -Force | Out-Null }",
            "    ",
            "    Write-Host \"Checking current state of '$regKeyPath'...\"",
            "    if (Test-Path \"Registry::$regKeyPath\") {",
            "        Write-Host \"Registry key '$regKeyPath' exists. Backing it up to '$backupFile'...\"",
            "        Remove-Item $nonExistentFlag -ErrorAction SilentlyContinue",
            "        reg export \"$regKeyPath\" \"$backupFile\" /y",
            "        if ($LASTEXITCODE -ne 0) { Write-Error \"REG EXPORT FAILED: Failed to backup registry key '$regKeyPath'. Aborting installation.\"; exit 1 }",
            "        Write-Host \"Backup successful.\"",
            "    } else {",
            "        Write-Host \"Registry key '$regKeyPath' does not exist. It will be created by the settings.\"",
            "        Write-Host \"Marking that it was non-existent for uninstallation purposes at '$nonExistentFlag'.\"",
            "        New-Item -Path $nonExistentFlag -ItemType File -Force | Out-Null",
            "        Remove-Item $backupFile -ErrorAction SilentlyContinue",
            "    }",
            "    ",
            "    Write-Host 'Applying new registry settings...'",
            "    $commands = @(",
            "        \"reg add '$regKeyPath' /v 'osvc' /t REG_BINARY /d '0000' /f\",",
            "        \"reg add '$regKeyPath' /v 'SkipContainerIdQuery' /t REG_BINARY /d '01000000' /f\",",
            "        \"reg add '$regKeyPath' /v 'SkipBOSDescriptorQuery' /t REG_BINARY /d '01000000' /f\"",
            "    )",
            "    foreach ($cmd in $commands) {",
            "        Write-Host \"Executing: $cmd\"",
            "        Invoke-Expression $cmd",
            "        if ($LASTEXITCODE -ne 0) { Write-Error \"COMMAND FAILED: $cmd. Check permissions or syntax.\"; exit 1 }",
            "    }",
            "    Write-Host 'Registry settings applied successfully.'",
            "}",
            "",
            "if ($IsElevatedProcess) {",
            "    Perform-InstallationLogic",
            "} else {",
            "    if (-not ([System.Security.Principal.WindowsPrincipal][System.Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)) {",
            "        Write-Host 'Administrator privileges required. Attempting to re-launch with elevation...'",
            "        $scriptFileToRun = $MyInvocation.MyCommand.Path",
            "        $psArguments = @(",
            "            '-NoProfile',",
            "            '-ExecutionPolicy',",
            "            'Bypass',",
            "            '-File',",
            "            $scriptFileToRun,",
            "            '-IsElevatedProcess'",
            "        )",
            "        try {",
            "            Write-Host \"Starting elevated process: PowerShell.exe $($psArguments -join ' ')\"",
            "            Start-Process PowerShell.exe -Verb RunAs -ArgumentList $psArguments -Wait -ErrorAction Stop",
            "            Write-Host 'Elevated process seems to have completed. The original (non-elevated) script instance will now exit.'",
            "        } catch {",
            "            Write-Error \"ELEVATION FAILED: $($_.Exception.Message)\"",
            "            Write-Error \"Please ensure UAC allows elevation or run Scoop from an Administrator PowerShell prompt.\"",
            "            exit 1",
            "        }",
            "        exit 0",
            "    } else {",
            "        Perform-InstallationLogic",
            "    }",
            "}"
        ]
    },
    "uninstaller": {
        "script": [
            "param([switch]$IsElevatedProcess)",
            "",
            "function Perform-UninstallationLogic {",
            "    Write-Host 'Executing uninstallation logic with administrative privileges...'",
            "    $regKeyPath = 'HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\usbflags\\18D1D00D0100'",
            "    $backupDir = \"$persist_dir\\registry_backup\"",
            "    $backupFile = \"$backupDir\\usbflags_18D1D00D0100_backup.reg\"",
            "    $nonExistentFlag = \"$backupDir\\usbflags_18D1D00D0100_was_nonexistent.flag\"",
            "    ",
            "    Write-Host 'Attempting to restore or clean up registry settings...'",
            "    if (Test-Path $backupFile) {",
            "        Write-Host \"Restoring registry key from backup '$backupFile'...\"",
            "        reg import \"$backupFile\"",
            "        if ($LASTEXITCODE -ne 0) {",
            "            Write-Error \"REG IMPORT FAILED: Failed to import registry backup from '$backupFile'. Manual intervention may be required.\"",
            "            exit 1",
            "        }",
            "        Remove-Item $backupFile -Force -ErrorAction SilentlyContinue",
            "        Write-Host 'Registry restored successfully from backup.'",
            "    } elseif (Test-Path $nonExistentFlag) {",
            "        Write-Host \"Registry key '$regKeyPath' was originally non-existent. Deleting it...\"",
            "        if (Test-Path \"Registry::$regKeyPath\") {",
            "            reg delete \"$regKeyPath\" /f",
            "            if ($LASTEXITCODE -ne 0) { Write-Warning \"REG DELETE FAILED: Failed to delete registry key '$regKeyPath'. It might have already been deleted or access was denied.\" }",
            "            else { Write-Host \"Registry key '$regKeyPath' deleted.\" }",
            "        } else {",
            "            Write-Host \"Registry key '$regKeyPath' no longer exists. No action needed.\"",
            "        }",
            "        Remove-Item $nonExistentFlag -Force -ErrorAction SilentlyContinue",
            "    } else {",
            "        Write-Warning \"No backup file or non-existent flag found in '$backupDir'.\"",
            "        Write-Warning \"The registry key '$regKeyPath' may not have been restored to its original state.\"",
            "    }",
            "    ",
            "    if (Test-Path $backupDir -PathType Container) {",
            "       if (-not (Get-ChildItem -Path $backupDir -Force)) {",
            "           Write-Host \"Cleaning up empty backup directory: $backupDir\"",
            "           Remove-Item $backupDir -Recurse -Force -ErrorAction SilentlyContinue",
            "       }",
            "    }",
            "}",
            "",
            "if ($IsElevatedProcess) {",
            "    Perform-UninstallationLogic",
            "} else {",
            "    if (-not ([System.Security.Principal.WindowsPrincipal][System.Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)) {",
            "        Write-Host 'Administrator privileges required. Attempting to re-launch with elevation...'",
            "        $scriptFileToRun = $MyInvocation.MyCommand.Path",
            "        $psArguments = @(",
            "            '-NoProfile',",
            "            '-ExecutionPolicy',",
            "            'Bypass',",
            "            '-File',",
            "            $scriptFileToRun,",
            "            '-IsElevatedProcess'",
            "        )",
            "        try {",
            "            Write-Host \"Starting elevated process: PowerShell.exe $($psArguments -join ' ')\"",
            "            Start-Process PowerShell.exe -Verb RunAs -ArgumentList $psArguments -Wait -ErrorAction Stop",
            "            Write-Host 'Elevated process seems to have completed. The original (non-elevated) script instance will now exit.'",
            "        } catch {",
            "            Write-Error \"ELEVATION FAILED: $($_.Exception.Message)\"",
            "            Write-Error \"Please ensure UAC allows elevation or run Scoop from an Administrator PowerShell prompt.\"",
            "            exit 1",
            "        }",
            "        exit 0 ",
            "    } else {",
            "        Perform-UninstallationLogic",
            "    }",
            "}"
        ]
    }
}